{"version":3,"sources":["components/MapGl/Mapgl.module.css","components/issdrop/issdrop.module.css","components/MapGl/mapgl.js","components/issdrop/IssDrop.js","components/modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Map","state","markers","viewport","latitude","longitude","zoom","arr","setInterval","a","fetch","then","res1","json","setState","all","this","map","position","push","width","height","mapboxApiAccessToken","process","mapStyle","className","classes","rotate","style","src","filter","value","index","circleBase","React","Component","Drop","Accordion","Lgroup","defaultActiveKey","Card","Toggle","as","Header","eventKey","backgroundColor","Collapse","Body","i","altitude","toFixed","timestamp","units","velocity","visibility","Example","modalIsOpen","Container","Button","color","float","marginRight","marginBottom","borderRadius","fontSize","onClick","toggleModal","bind","Modal","isOpen","ModalHeader","toggle","ModalBody","App","margin","fontStyle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1fd50834.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"circleBase\":\"Mapgl_circleBase__1W3lj\",\"rotate\":\"Mapgl_rotate__1FEoY\",\"rotation\":\"Mapgl_rotation__1CRyX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Lgroup\":\"issdrop_Lgroup__3_Y6t\"};","import React, { Component } from 'react';\nimport ReactMapGL, {Marker,Layer, Feature} from 'react-map-gl';\nimport classes from './Mapgl.module.css'\n\nclass Map extends React.Component {\n\n  state = {\n\n    markers :[[0,0]],\n    viewport: {\n\n      latitude: 37.7577,\n      longitude: -122.4376,\n      zoom:2.2\n    },\n    arr:[[0,0]]\n    \n\n    }\n\n\n  componentDidMount(){\n    setInterval(async () => {\n\n      fetch('https://api.wheretheiss.at/v1/satellites/25544')\n   \n    .then(res1 => res1.json())\n    .then(res1 => this.setState({markers: [[res1.latitude,res1.longitude]],\n                                  viewport: {latitude:res1.latitude,longitude:res1.longitude,zoom:2.2},\n                                all:[res1]}));\n    \n  },4000)}\n\n\n\n  render() {\n  \n      this.state.markers.map((position) =>\n    this.state.arr.push(position)\n    \n    \n    )\n\n\n   \n    return (\n      <ReactMapGL\n        {...this.state.viewport}\n        width=\"100vw\" // It always override the view(viewport) width state.\n        height=\"100vh\" // It always override the view(viewport) height state.\n       \n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n      mapStyle=\"mapbox://styles/mapbox/dark-v8\"\n      >\n        {this.state.markers.map((position) => \n        <Marker latitude={position[0]} longitude={position[1]}>\n        <img className={classes.rotate} style = {{width: '50px', height: '50px'}} src={'https://icons-for-free.com/iconfiles/png/512/basic+white-space+station-131994931880957594.png'}/>\n        </Marker>\n        \n)}\n        {this.state.arr.filter(function(value,index,arr){\n    return index % 8 == 0;\n        }).map((position) => \n        <Marker latitude={position[0]} longitude={position[1]}>\n        <div className={classes.circleBase}></div>\n        </Marker>\n        \n)}\n  \n      </ReactMapGL>\n    );\n  }\n}\nexport default Map","import React, { Component } from 'react';\nimport { Accordion,Card  } from 'react-bootstrap';\nimport classes from './issdrop.module.css'\n\nclass Drop extends React.Component {\n    state = {\n\n\n        all:[]\n        \n    \n        }\n    \n    \n      componentDidMount(){\n        setInterval(async () => {\n    \n          fetch('https://api.wheretheiss.at/v1/satellites/25544')\n       \n        .then(res1 => res1.json())\n        .then(res1 => this.setState({all:[res1]}));\n        \n      },4000)}\n\n  render() {\n   \n    return (\n<div className=\"fixed-top\">\n<Accordion className={classes.Lgroup} defaultActiveKey=\"1\">\n  <Card>\n    <Accordion.Toggle as={Card.Header} eventKey=\"0\" style = {{backgroundColor:'yellow'}}>\n      ISS information\n    </Accordion.Toggle>\n    <Accordion.Collapse eventKey=\"0\">\n        \n      <Card.Body>\n\n      {this.state.all.map((i) => \n      <div>\n        <p>Altitude: {i.altitude.toFixed(2)}</p>\n        <p>Longitude: {i.longitude.toFixed(2)}</p>\n        <p>Latitude: {i.latitude.toFixed(2)}</p>\n        <p>Timestamp: {i.timestamp}</p>\n        <p>Units: {i.units}</p>\n        <p>Velocity: {i.velocity.toFixed(2)}</p>\n        <p>Visibility: {i.visibility}</p>\n        </div>\n        )}\n\n      \n\n        </Card.Body>\n\n    </Accordion.Collapse>\n  </Card>\n\n</Accordion>\n  </div>\n    );\n  }\n}\nexport default Drop","import React, { Component } from 'react';\nimport { Modal,Button,ModalHeader,ModalBody,ModalFooter,Container } from 'reactstrap';\n//import classes from './Modal.module.css'\n\nclass Example extends Component {\n\nstate = {\n  \n    modalIsOpen:false\n}\n\ntoggleModal(){\n    this.setState({\n        modalIsOpen:!this.state.modalIsOpen\n    })\n}\n\n  render(){\n    return (\n        \n  <Container>\n      \n     \n      <div className=\"fixed-bottom\">\n      <Button color = 'danger' style = {{width:\"80px\",height:\"80px\", float: 'right',marginRight: '10px', marginBottom: '10px',borderRadius: '50%',fontSize:'35px'}} onClick={this.toggleModal.bind(this)}>+</Button>\n      </div>\n\n\n      <Modal isOpen={this.state.modalIsOpen} style={{backgroundColor:'yellow'}}>\n        <ModalHeader toggle={this.toggleModal.bind(this)} style={{backgroundColor:'yellow'}}>Welcome to my practice React app!</ModalHeader>\n        <ModalBody>This app allows you to track the international space station in real time. Click on 'ISS information' to see the coordinates and some other stuff. Leave it for a while and you will see the breadcrumbs trail of the ISS.</ModalBody>\n\n      </Modal>\n      \n      \n      </Container>\n  \n        \n      );\n  }\n\n  }\n\n\nexport default Example","import React from 'react';\n// import Map from './components/map';\nimport Map from './components/MapGl/mapgl';\nimport Drop from './components/issdrop/IssDrop';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport Example from './components/modal/Modal';\n\n\nimport './App.css';\n\nfunction App() {\nreturn(\n  <div>\n\n\n\n <Drop/>\n    \n <Map/>\n \n    \n \n  \n\n    <div className=\"fixed-bottom\">\n    <Example/>\n      <h5 style={{color:'yellow',margin:'30px 10px',fontStyle: 'italic',fontSize: '15px'}}>by Nikita Voevodin</h5>\n    </div>\n  \n  \n    \n  </div>\n)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}